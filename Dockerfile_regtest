# Dockerfile for WRF regression testing (regtest build)
# Default build argument selects regtest data
ARG argname=regtest

FROM centos:7
MAINTAINER Boyuan (Keven) Guan

ENV WRF_VERSION 4.0.3
ENV WPS_VERSION 4.0.2
ENV NML_VERSION 4.0.2

# Set up base OS environment (use vault mirrors for CentOS 7)
RUN sed -i 's|^mirrorlist=|#mirrorlist=|g' /etc/yum.repos.d/CentOS-Base.repo && \
    sed -i 's|^#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-Base.repo && \
    yum -y update

# Install compilation and runtime dependencies
RUN yum -y install scl file gcc gcc-gfortran gcc-c glibc.i686 libgcc.i686 libpng-devel jasper \
    jasper-devel hostname m4 make perl tar bash tcsh time wget which zlib zlib-devel \
    openssh-clients openssh-server net-tools fontconfig libgfortran libXext libXrender \
    ImageMagick sudo epel-release git && \
    yum clean all

# Install Software Collections (devtoolset-8) and drop broken repo
RUN yum -y install centos-release-scl && \
    rm -f /etc/yum.repos.d/CentOS-SCLo-sclo.repo && \
    for f in /etc/yum.repos.d/CentOS-SCLo-*.repo; do \
      [ -f "$f" ] && sed -i 's|mirrorlist|#mirrorlist|g' "$f" && \
      sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' "$f"; \
    done && \
    yum -y install devtoolset-8 && \
    yum clean all

# Create wrf user and workspace
RUN groupadd wrf -g 9999 && \
    useradd -u 9999 -g wrf -G wheel -M -d /wrf wrfuser && \
    mkdir /wrf && \
    chown -R wrfuser:wrf /wrf && \
    chmod 6755 /wrf

# Default parallel build jobs
ENV J 4

# Build OpenMPI under devtoolset-8
RUN mkdir -p /wrf/libs/openmpi/BUILD_DIR && \
    scl enable devtoolset-8 -- bash -c "\
      cd /wrf/libs/openmpi/BUILD_DIR && \
      curl -L -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.0.tar.gz && \
      tar -xf openmpi-4.0.0.tar.gz && \
      cd openmpi-4.0.0 && \
      ./configure --prefix=/usr/local &> /wrf/libs/build_log_openmpi_config && \
      make -j${J} &> /wrf/libs/build_log_openmpi_make && \
      make install &>> /wrf/libs/build_log_openmpi_make && \
      cd / && \
      rm -rf /wrf/libs/openmpi/BUILD_DIR"

# Build HDF5 under devtoolset-8
RUN mkdir -p /wrf/libs/hdf5/BUILD_DIR && \
    scl enable devtoolset-8 -- bash -c "\
      cd /wrf/libs/hdf5/BUILD_DIR && \
      git clone --branch hdf5-1_10_4 --depth 1 https://github.com/HDFGroup/hdf5.git hdf5-1_10_4 && \
      cd hdf5-1_10_4 && \
      ./configure --enable-fortran --enable-cxx --prefix=/usr/local &> /wrf/libs/build_log_hdf5_config && \
      make -j${J} &> /wrf/libs/build_log_hdf5_make && \
      make install &>> /wrf/libs/build_log_hdf5_make && \
      cd / && \
      rm -rf /wrf/libs/hdf5/BUILD_DIR"

# Build ParallelIO (PIO) under devtoolset-8
RUN mkdir -p /wrf/libs/pio/BUILD_DIR && \
    scl enable devtoolset-8 -- bash -c "\
      cd /wrf/libs/pio/BUILD_DIR && \
      git clone --branch 2.5.4 --depth 1 https://github.com/NCAR/ParallelIO ParallelIO-2.5.4 && \
      cd ParallelIO-2.5.4 && \
      ./configure --enable-fortran --prefix=/usr/local &> /wrf/libs/build_log_pio_config && \
      make -j${J} &> /wrf/libs/build_log_pio_make && \
      make install &>> /wrf/libs/build_log_pio_make && \
      cd / && \
      rm -rf /wrf/libs/pio/BUILD_DIR"

# Enable SSH for root and generate host keys
RUN ssh-keygen -A && \
    sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config && \
    sed -i 's/#RSAAuthentication yes/RSAAuthentication yes/g' /etc/ssh/sshd_config && \
    sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config

# Prepare directories and permissions
RUN mkdir -p /wrf/WPS_GEOG /wrf/wrfinput /wrf/wrfoutput && \
    chown -R wrfuser:wrf /wrf /wrf/WPS_GEOG /wrf/wrfinput /wrf/wrfoutput /usr/local && \
    chmod 6755 /wrf /wrf/WPS_GEOG /wrf/wrfinput /wrf/wrfoutput /usr/local

# Install NCL from EPEL
RUN yum --disablerepo=centos-sclo-sclo -y install ncl && \
    yum clean all
ENV NCARG_ROOT=/usr

# Set up interactive shell environment
RUN echo export LDFLAGS="-lm" >> /etc/bashrc && \
    echo export NETCDF=${NETCDF} >> /etc/bashrc && \
    echo export JASPERINC=/usr/include/jasper/ >> /etc/bashrc && \
    echo export JASPERLIB=/usr/lib64/ >> /etc/bashrc && \
    echo export LD_LIBRARY_PATH="/opt/rh/devtoolset-8/root/.../openmpi/lib:${NETCDF}/lib:\${LD_LIBRARY_PATH}" >> /etc/bashrc && \
    echo export PATH=".:/opt/rh/devtoolset-8/root/usr/bin:/usr/lib64/openmpi/bin:\${NETCDF}/bin:\$PATH" >> /etc/bashrc
RUN echo setenv LDFLAGS "-lm" >> /etc/csh.cshrc && \
    echo setenv NETCDF "\${NETCDF}" >> /etc/csh.cshrc && \
    echo setenv JASPERINC "/usr/include/jasper/" >> /etc/csh.cshrc && \
    echo setenv JASPERLIB "/usr/lib64/" >> /etc/csh.cshrc && \
    echo setenv LD_LIBRARY_PATH "/opt/rh/devtoolset-8/root/...penmpi/lib:\${NETCDF}/lib:\${LD_LIBRARY_PATH}" >> /etc/csh.cshrc && \
    echo setenv PATH ".:/opt/rh/devtoolset-8/root/usr/bin:/usr/lib64/openmpi/bin:\${NETCDF}/bin:\$PATH" >> /etc/csh.cshrc

# Disable strict host key checking for WRF user
RUN mkdir /wrf/.ssh && echo "StrictHostKeyChecking no" > /wrf/.ssh/config
COPY default-mca-params.conf /wrf/.openmpi/mca-params.conf
RUN mkdir -p /wrf/.openmpi && \
    chown -R wrfuser:wrf /wrf

# Switch to wrfuser
USER wrfuser
WORKDIR /wrf

# Display build argument
RUN echo "Selected build mode: $argname"

# Download tutorial data when building tutorial image
RUN if [ "$argname" = "tutorial" ] ; then \
      curl -SL --fail http://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz | tar -xzC /wrf/WPS_GEOG ; \
    fi
RUN if [ "$argname" = "tutorial" ] ; then \
      if curl -SL --head --fail http://www2.mmm.ucar.edu/wrf/TUTORIAL_DATA/colorado_march16.new.tar.gz; then \
        curl -SL http://www2.mmm.ucar.edu/wrf/TUTORIAL_DATA/colorado_march16.new.tar.gz | tar -xC /wrf/wrfinput ; \
      else \
        echo "WARNING: tutorial Colorado data not found; skip manual download." ; \
      fi ; \
    fi
RUN if [ "$argname" = "tutorial" ] ; then \
      curl -SL --fail http://www2.mmm.ucar.edu/wrf/src/namelists_v${NML_VERSION}.tar.gz | tar -xzC /wrf/wrfinput ; \
    fi
RUN if [ "$argname" = "tutorial" ] ; then \
      if curl -SL --head --fail http://www2.mmm.ucar.edu/wrf/TUTORIAL_DATA/WRF_NCL_scripts.tar.gz; then \
        curl -SL http://www2.mmm.ucar.edu/wrf/TUTORIAL_DATA/WRF_NCL_scripts.tar.gz | tar -xzC /wrf ; \
      else \
        echo "WARNING: WRF_NCL_scripts.tar.gz not found; skipping."; \
      fi ; \
    fi

# Download regression test data when building regtest image
RUN if [ "$argname" = "regtest" ] ; then \
      curl -SL --fail http://www2.mmm.ucar.edu/wrf/dave/DATA/Data_small/data_SMALL.tar.gz | tar -xC /wrf ; \
    fi
RUN if [ "$argname" = "regtest" ] ; then \
      curl -SL --fail http://www2.mmm.ucar.edu/wrf/dave/nml.tar.gz | tar -xzC /wrf ; \
    fi
RUN if [ "$argname" = "regtest" ] ; then \
      curl -SL --fail http://www2.mmm.ucar.edu/wrf/dave/script.tar | tar -xC /wrf ; \
    fi

# Pull WPS source for tutorial
RUN if [ "$argname" = "tutorial" ] ; then git clone https://github.com/wrf-model/WPS.git WPS ; fi

# Clone and prepare WRF
RUN echo _HERE1_
RUN git clone https://github.com/davegill/WRF.git /wrf/WRF && \
    cd /wrf/WRF && \
    git fetch origin +refs/pull/4/merge:FETCH_HEAD && \
    git checkout -qf FETCH_HEAD
RUN echo _HERE2_

# Environment variables for runtime
ENV JASPERINC /usr/include/jasper
ENV JASPERLIB /usr/lib64
ENV NETCDF_classic 1
ENV LD_LIBRARY_PATH /opt/rh/devtoolset-8/root/usr/lib/gcc/x86_64-redhat-linux/8:/usr/lib64/openmpi/lib:${NETCDF}/lib:${LD_LIBRARY_PATH}
ENV PATH .:/opt/rh/devtoolset-8/root/usr/bin:/usr/lib64/openmpi/bin:${NETCDF}/bin:$PATH

# Generate SSH keypair for wrfuser
RUN ssh-keygen -f /wrf/.ssh/id_rsa -t rsa -N '' \
    && chmod 600 /wrf/.ssh/config \
    && chmod 700 /wrf/.ssh \
    && cp /wrf/.ssh/id_rsa.pub /wrf/.ssh/authorized_keys

# Default volume and entrypoint
VOLUME /wrf
CMD ["/bin/tcsh"]
# End of Dockerfile_regtest
